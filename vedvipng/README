vedvipng
******

The program in this directory (visualequation/ve-dvipng) is a modification of
dvipng 1.17 to support some functionalities of visualequation. It has been 
named vedvipng to state that it is based on dvipng but it is not identical,
but a slightly modified.

Not modified files (or just modified by a few characters) preserve the original
license notice unaltered. Modified files include visualequation license notice 
above the original dvipng license notice.

To simplify the licensing, it was chosen to use the GPL3+ for the modified
parts of dvipng, but the author of vedvipng has no problem with those
modifications being used under the original dvipng license (LGPL3+).


Installation
*******

To know the details about installation (should be documented better in next 
releases of visualequation), read the (unmodified) INSTALL file. In short, 
provided that you have the dependencies correctly installed, the following
should be enough:

    ./configure

or

   ./configure --prefix=/some/path

and

   make
   make install


Usage/details
*******

The final user must not care about vedvipng, only developers. Main difference 
with resepect to dvipng is that it is being used as a shared library (through 
Python ctypes) instead of a standalone executable. That simplifies the 
interface and speeds up execution a lot (after the first call) so execution
time becomes negligible compared to "latex", which must be run just before.

It is necessary to set three variables before the first call to the main 
function called "vedvipng": "vedvipngpath", "veinputfile" and "veoutputfile". 
That is very easy by using ctypes.

vedvipng does not parse original command-line options. Instead, it does always 
the same: As input, it gets the output resolution in dpi and an array (and its
size) to be filled with the coordinates (top-left and bottom-right) of the
rectangles asociated to any subequation. For that, several approaches are used
depending of the particular subequation. The common trick is to use a key color
cmyk space (c, m, y, k) where k == 1 and at least c is different than
0. The color is safe because: 1. Colors specified by users can be checked by 
visualequation, and 2. Black color in cmyk space is (c, m, y, 1) with c == m ==
y == 0. Any other combination of c, m, y is also exactly (the same) black, but 
not used in practice.

c specifies the instruction. Except for "dummy boxes" (which are simply
ignored), the rest of instructions use the exact form (0.x, 0.yyyyy, 0.zzzzz,
1) where yyyyy is the ID of the subeq associated to the requested rectangle
and zzzzz, in the case of being different than xxxxx, is the ID of the 
juxt-block to which the subeq belongs. The ID is also the index of
the array element to be filled for that subeq.

Some complexity is used in order to avoid breaking intra-words kerning. For 
example, TeX put "df" very close and these positions would be in different
positions if a special command (like color change) is used between them.

Warnings
******
vedvipng requires corrections to be used a shared library. In particular.

	*	It makes use of some functions like "strtod" from stdlib which act 
		differently depending on environment variable LC_NUMERIC. It must be
		set to "C" or similar to, e.g., understand correctly the string "0.2"
		as the real number 0.2 and not a 0. Another solution would be to use
		a specific strtod implementation.
	*	Some variables are declared static in some dvipng functions. Under
		different thread conditions, they caused Segmentation Faults. Fixes
		have been applied for the known problems, but there could be some
		hidden ones. 


About dvipng
*******

dvipng [1.17] is released under the GNU Lesser General Public License
version 3 by Jan-AAke Larsson. Even if its README does not indicate the "or 
later" part, its license notices do: "[LGPL3] or (at your option) any later 
version". LGPL3+ is also the license stated in the FSF Directory for dvipng.

The website of the dvipng project is:

   http://savannah.nongnu.org/projects/dvipng/
